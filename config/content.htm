<h1>About</h1>
<p></p>
<p>這是協同產品設計實習課程 2023  的作業倉儲與網站</p>
<p>組員: 林奇川41023130 , 姜陳昊41023142</p>
<p>網站倉儲: <a href="https://github.com/mdecd2023/2a-pj1ag9.git">https://github.com/mdecd2023/2a-pj1ag9.git</a></p>
<p>網站連結:<span> <a href="https://mdecd2023.github.io/2a-pj1ag9/content/index.html">https://mdecd2023.github.io/2a-pj1ag9/content/index.html</a></span></p>
<h1>Progress</h1>
<p><strong>week 1 :</strong>  講解課程內容及評分標準</p>
<p><strong>week 2 :</strong>  二二八大家一起放假囉</p>
<p><strong>week 3 :</strong><span> </span>講解如何建立靜態網站</p>
<p><span></span></p>
<p><strong>week 4 :</strong><span> 放上</span>Bubblerub tutorial 製作過程與心得</p>
<p><span></span></p>
<p><strong>week 5 :</strong><span> </span>建立 TCEXAM 帳號、添加 latex</p>
<p><span></span></p>
<p><strong>week 6 :</strong><span> </span>TCEXAM 小考、說明建立 pj1 統整協同作業</p>
<p><span></span></p>
<p><strong>week 7 :<span> </span></strong>清明節放假去</p>
<p><strong>week 8 :<span> </span></strong>TCEXAM 小考、 製作 bubbleRob football</p>
<p></p>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<p>
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p><h2>GitExtensions</h2>
<p><a href="https://github.com/mdecourse/cad2021/files/7517136/GitExtensions_hybrid.zip">下載尚未個人化設定的 GitExtensions</a></p>
<p>利用 GitExtensions 輸入提交訊息時, 若出現字串 highlight 表示提交字串可能不會被 Github 接受, 導致<span> </span><a href="https://github.com/mdecourse/cad2021_hw/commit/fafa93e9925892354f02996006a965bbd2b4a56e">Github Pages 轉檔錯誤</a>, 網頁將無法正常連線. 修正錯誤後, 以正確的提交字串 push, 可以得到正確的<a href="https://github.com/mdecourse/cad2021_hw/commit/09d98e1dfc4a0cfda2edae530efb5e08ac1f47ba">轉檔結果</a>.</p>
<p>GitExtensions 設定:</p>
<p><img alt="" height="486" src="https://mde.tw/cad2021_hw/images/GitExtensions_Paths_setup.png" width="600"/></p>
<p>GitExtensions Git config setup:</p>
<p><img alt="" height="486" src="https://mde.tw/cad2021_hw/images/GitExtensions_Git_config.png" width="600"/></p>
<p>以下將請已經完成 GitExtensions 與 SSH 結合使用的學員製作"GitExtensions 導引" Wink, 說明詳細的設定流程.</p>
<p>這是計算機程式課程 2023 Fall 的作業倉儲與網站 template</p>
<hr/>
<p>41023130</p>
<p>網站倉儲: <a href="https://github.com/41023130/cp2021_hw">https://github.com/41023130/cp2021_hw</a> <a href="https://github.com/41023130/cp2021_hw"></a></p>
<p>網站連結: <a href="https://41023130.github.io/cp2021_hw/content/index.html">https://41023130.github.io/cp2021_hw</a></p>
<p>嗨xd??????</p>
<p></p>
<h1>W1</h1>
<p>1.下載老師給的python311_w1_cd2023並打開ipv6<br/><br/>2.git clone https://github.com/mdecd2023/2a-pj1agxxx.git  需使用[ipv4]<br/><br/>3.git clone https://github.com/mdecycu/cmsimde.git<br/><br/>4.進入到 cmsimde 資料夾內把 up_dir 取出所有檔案放入倉儲的根目錄<br/><br/>5.cd 2a-pj1agxxx 後，輸入指令 cms ==&gt;出現問題... No module name "flask"<br/>   解決方式pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl    需使用[ipv6]<br/><br/></p>
<h1>W5</h1>
<p><span>建立</span><a href="https://exam.cycu.org/public/code/index.php">考試</a><span>帳號</span></p>
<p><span></span></p>
<p><span></span></p>
<h1>note</h1>
<h2>專案規劃</h2>
<p>規劃專案的12個步驟</p>
<p><br/>如果我們有好多好多的事情要做，誰不愛擁有一個清單？告訴自己該做什麼，並且詳細的條列出來，下次只要依循這些清單上面的步驟，我們就可以完成一個專案，又不用害怕遺漏甚麼東西，那該有多好呢？當然身為負責這個專案的你，以下步驟可以幫助你更輕鬆有效的規劃專案。</p>
<p>1.定義範疇<br/>這是一個規劃專案的重要第一步，此專案要做甚麼、包含的範圍有多廣，必須在何時完成，你必須把這個大餅畫出來再做細分，才能夠掌握此專案的正確方向。<br/><br/>2.確定您的專案發起人<br/>每一個專案都會有一個發起人或利益相關者，找出這些人都是誰。</p>
<p><span>他們必定會對此專案有一定的影響力，以確保該專案向前推進時，該找誰來溝通，並且一同策劃專案的方向，有了這個專案發起人，可以讓專案經理更輕鬆的管理專案。</span><br/><br/>3.確定可用資源<br/>當你在定義範疇的時候，你就必須清楚你需要多少的資源才得以完成此專案，他們是技術性質的嗎？他們需要一個特殊的技能或培訓嗎？他們是已經在公司裡面嗎？或他們需要被聘用或簽約。</p>
<p><span>專案開始之前，你必須把資源分配好。</span><br/><br/>4.檢查時程<br/>專案規劃最重要的部分就是專案時程，你必須要了解你有多少的事情要做，搭配上你的資源必須花費多少的時間，雖然我們的時間總是在變，我們有許多無法控制的因子，沒有辦法確定正確的時間。</p>
<p><span>但是如果有一個完美的甘特圖，可以讓你更能夠掌握專案的進度。</span><br/><br/>5.建立WBS<br/>將你的專案展開，越小的事越容易完成，所以把WBS展開的仔細點，會更有幫助。許多人都會選擇用心智圖的方式，能夠簡單明瞭的看到所有的任務項目，讓你在報告的時候也可以有漂亮且專業的圖來呈現。<br/><br/>6.切分成小步驟<br/>如果接到手上的是一個很大的專案，你可能不知道該從何處下手，如果你把專案切得越細，你就可以更清楚，你所需要的資源和時間，也更能夠做細部的掌控，所以只要有一個好的觀念，相信再大的專案也難不倒你。<br/><br/>7.制定一個計劃草案<br/>當你正在做一個專案時，你必須清楚到成本、時間、資源，大致上需要做些什麼。你可以把這些擬定成一個計畫草案，這是你第一次把所有的東西都整合在一起，也有可能會寫上專案開始的時間以及預計完成的時間，讓你的團隊們能夠知道整個計畫的概要。<br/><br/>8.草案檢討與反饋<br/>當你完成了第七步驟的草案後，你就可以發佈給團隊成員們，大家找個時間做個會議，在會議當中，團隊成員們可以對草案提出反饋，在這樣的溝通與互動過程中，能夠將專案計畫導到更接近完美的專案計畫。<br/><br/>9.完成精確計畫<br/>現在該計劃正在向前推進，透過反饋與檢討讓專案計畫逼近完美了，現在就開始把這些資訊整理、討論該如何去做執行，讓這個專案開始啟動吧！<br/><br/>10.監測進展情況<br/>開始做執行的階段，你必須不斷監測也許是每一周或是每一天，你必須要好好的規劃，在執行的過程中，難免會出現一些意料之外的事情，所以你必須要趕緊處理，也許是停止或者找解決的方法。</p>
<p><span>身為一個專案經理人，在這個時候是非常重要的，如果搭配一個好的專案軟體，會讓你的專案更加順利。</span><br/><br/>11.保留所有文件<br/>在執行一個專案時，我們無法確保此專案會一直照著我們的規劃走，如果有些突發狀況，雖然不是我們預期的，但我們還是要把他記錄下來。</p>
<p><span>這樣的專案紀錄可以讓整個專案更逼近寫實，也可以讓之後的成員們，有一些資料能夠參考與學習。</span><br/><br/>12.專案結束仍要保持聯繫<br/>最後，你已經完成專案了，但是你不能確保此專案之後不會有任何問題，有些地方還是需要專家的幫忙，如果你的技術部門是外包的，那你就必須要隨時與你的外包商聯繫，如果哪一天突然發生突發狀況，你才不會找不到人來幫你處理，隨時關心團隊成員，也可以建立良好的人脈關係唷！</p>
<p>參考資料: <a href="https://www.projectclub.com.tw/hard-power/pm-dictionary/754-12.html">https://www.projectclub.com.tw/hard-power/pm-dictionary/754-12.html</a> </p><h2>Synchronize</h2>
<p>如何同步倉儲步驟</p>
<p>step1. 輸入指令 git add . ，提交指紋碼的變更</p>
<p>step2. git commit -m "message" (message裡輸入提交的名稱)</p>
<p>step3. 輸入指令 git pull 將倉儲與同組的隊員更新至最新版</p>
<p>step4. 打cms檢查是否同步</p>
<p>step5. 如果倉儲內容有變更，需再輸入指令 git push</p>
<p>step6. 如果版本推上去之後有衝突，需仔細檢查哪裡出錯並修正</p><h1>tutorial1</h1>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VgNjUnNQfq4" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="582" src="https://www.youtube.com/embed/vFcdO2sFZok" title="探測車1" width="1035"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="582" src="https://www.youtube.com/embed/9NprlLK0dC8" title="探測車2" width="1035"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="546" src="https://www.youtube.com/embed/XjB7bXGcl-Y" title="模擬影片" width="1045"></iframe>41023130林奇川:<span>在做這個的時侯，發現很多問題，例如名稱打錯、尺寸給錯、程式放錯等 經過我的一系列修改，最終讓他可以完整進行所需要的工作。</span></p>
<p>41023142姜陳昊:做出球體碰撞 很累ㄟ</p><h2>problem</h2>
<p><strong>CoppeliaSim Edu use language</strong></p>
<p>CoppeliaSim（也稱作V-REP）是一個通用的機器人仿真軟件，支持多種編程語言，包括 C/C++、Python、Lua、Matlab 等等。您可以使用其中任何一種語言進行仿真場景的構建、機器人控制、物體偵測等等操作。CoppeliaSim提供了多種API函數供不同的編程語言使用，讓使用者能夠快速進行仿真操作。</p>
<p><strong>Lua language</strong></p>
<p>Lua 是一種輕量級、高效、可擴展的腳本語言，被廣泛應用於遊戲開發、Web開發、嵌入式系統等領域。它是由巴西里約熱內盧天主教大學（Pontifical Catholic University of Rio de Janeiro）的一個小組在1993年開發的。Lua的設計目標是提供一種簡單、可靠、可擴展的腳本語言，它具有以下特點：</p>
<p>1. 簡潔易學：Lua語法簡潔明了，易於學習和使用。<br/>2. 高效快速：Lua的運行速度非常快，並且具有極低的內存消耗。<br/>3. 可擴展性強：Lua提供了豐富的 API 和庫，支持動態擴展，能夠方便地與 C/C++ 語言進行互操作。<br/>4. 跨平台性強：Lua可以運行在多種操作系統上，包括 Windows、Linux、Mac OS 等等。</p>
<p><br/>由於它的高效性和易擴展性，Lua被廣泛用於遊戲開發中，如《魔獸世界》、《Minecraft》等遊戲就使用了Lua。</p>
<p></p>
<p><strong>CoppeliaSim.ttt 檔案格式與 .simscene.xml 檔案格式有何不同?<br/></strong></p>
<p>1. 文件格式不同：<br/>CoppeliaSim.ttt文件是二進制文件格式，而.simscene.xml文件是XML文件格式。<br/><br/>2. 可讀性不同：<br/>CoppeliaSim.ttt文件是一個二進制文件，因此不易讀取和修改。而.simscene.xml文件是一個純文本文件，易於編輯和修改，也易於版本控制。<br/><br/>3. 儲存方式不同：<br/>CoppeliaSim.ttt文件可以通過點擊CoppeliaSim軟件的“保存”按鈕來保存。而.simscene.xml文件則可以通過使用CoppeliaSim軟件中的“導出場景”功能來生成，或者通過手動編輯XML文件來創建。<br/><br/>4. 功能不同：<br/>CoppeliaSim.ttt文件格式支援保存仿真場景中的所有物體、傳感器、控制器等等的信息，並且可以包含Lua代碼。.simscene.xml文件格式僅支援保存仿真場景中的物體、位置、大小、形狀等基本信息，不支援保存複雜的控制代碼。<br/><br/>總而言之，CoppeliaSim.ttt文件格式和.simscene.xml文件格式在文件格式、可讀性、儲存方式和功能等方面存在差異。使用者可以根據需要選擇不同的文件格式來保存仿真場景。</p>
<p></p>
<p><strong>在 coppeliasim 中, scene 與 model 有何不同?</strong></p>
<p>Scene 是 CoppeliaSim 中的基本單位，它包括所有的物體、傳感器、效果器和控制器等等。在 CoppeliaSim 中，使用者可以通過創建 Scene 來構建仿真場景，並在其中進行各種操作。<br/><br/>Model 則是 Scene 中的一個物體，它可以是機器人、傳感器、效果器等等。Model 有自己的位置、姿態、大小和形狀等屬性，可以被控制和操作。<br/><br/>簡而言之，Scene 是 CoppeliaSim 中的最基本單位，Model 是 Scene 中的物體。在 CoppeliaSim 中，使用者可以通過創建 Scene 來構建仿真場景，再在其中添加不同的 Model，通過控制和操作這些 Model 來實現所需的仿真功能。</p>
<p><strong>在 CoppeliaSim 中, 何謂 clean model?</strong><br/><br/>在CoppeliaSim中，clean model是指一個簡化的物體模型，通常是由一個或多個基本形狀（例如球體、方體等）組成的，用於減少物體模型的複雜性和計算量，以提高仿真性能。clean model是在物體創建過程中自動生成的，可以在CoppeliaSim中的物體屬性面板中進行設置和調整。<br/><br/>使用clean model可以減少物體模型的三角面數量，提高仿真效率。在CoppeliaSim中，物體模型的三角面數量會直接影響仿真速度，因此使用clean model可以在保持物體外觀的前提下，大幅提高仿真速度。另外，clean model也可以用於減少物體模型的碰撞形狀，提高碰撞檢測效率。<br/><br/>需要注意的是，使用clean model可能會導致物體模型的外觀出現明顯的不同，因此需要根據實際需求和模擬效果來選擇是否使用clean model。如果需要高精度的物體模擬效果，則不建議使用clean model。</p>
<p><strong>在CoppeliaSim scene 中,如何利用 lua 以及 python 建立 primitive type object, 並利用程式設定物件位置?</strong></p>
<p>在CoppeliaSim scene中，可以使用Lua或Python腳本來建立基本形狀物體（primitive type object），並利用程式設定物體位置。<br/><br/>以下是使用Lua腳本建立基本形狀物體並設定位置的示例：<br/><br/>lua</p>
<p><br/>-- 創建一個球形物體<br/>local radius = 0.1<br/>local ballHandle = sim.createPureShape(0, 16, {radius, radius, radius}, 0.005, nil)<br/><br/>-- 設定物體位置<br/>local position = {0, 0, 0.5}<br/>sim.setObjectPosition(ballHandle, -1, position)<br/>以上代碼首先創建了一個半徑為0.1的球形物體，並將其存儲在變量ballHandle中。然後，通過sim.setObjectPosition函數將球形物體放置在世界坐標系中的位置(0,0,0.5)。<br/><br/>以下是使用Python腳本建立基本形狀物體並設定位置的示例：<br/><br/>python<br/><br/>import sim<br/><br/># 創建一個球形物體<br/>radius = 0.1<br/>ballHandle = sim.simCreatePureShape(0, 16, [radius, radius, radius], 0.005, None)<br/><br/># 設定物體位置<br/>position = [0, 0, 0.5]<br/>sim.simSetObjectPosition(ballHandle, -1, position)<br/>以上代碼首先創建了一個半徑為0.1的球形物體，並將其存儲在變量ballHandle中。然後，通過sim.simSetObjectPosition函數將球形物體放置在世界坐標系中的位置(0,0,0.5)。<br/><br/>需要注意的是，以上代碼僅示範了如何創建基本形狀物體並設定位置。在實際應用中，可能需要對物體進行更多的設置，例如添加碰撞形狀、質量等等。使用者可以根據需要進一步設置物體屬性，以滿足自己的需求。</p>
<p><strong>Coppeliasim 中graph 作用是什麼?</strong></p>
<p>Graph 是可以記錄和可視化模擬數據的場景對象。數據記錄在數據流中，數據流是與時間戳相關聯的值的順序列表，數據流可以直接可視化為時間圖。通過組合 2 或 3 個數據流，可以獲得場景中的 x/y 曲線或 3D 曲線。</p>
<p><strong>程式序與非程式序差異為何?</strong></p>
<p>程式序列通常包括由程式語言編寫的指令，用於告訴計算機如何執行特定的任務。這些指令通常包括條件語句、迴圈、函數和變量等結構，並且是按照嚴格的語法規則編寫的。這些指令被編譯器或解釋器轉換為機器碼，這是計算機可以理解和執行的二進制指令。<br/><br/>非程式序列則是一系列指令或操作，用於執行某些特定的任務，但它們通常不是用程式語言編寫的。這些指令可能是人類可以直接理解和執行的，例如在工廠中製造產品時使用的操作序列。它們可能包括按照特定順序執行的一系列步驟，例如裝配零件或烹飪食物，或者可能包括從一個系統中提取信息並在另一個系統中輸入信息的一系列操作。</p>
<p></p><h1>PJ1</h1>
<h2>W6</h2>
<p><a href="/downloads/20.txt">未完成名單</a></p>